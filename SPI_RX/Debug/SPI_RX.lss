
SPI_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000005ee  00000682  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800068  00800068  0000068a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000068a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001013  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000918  00000000  00000000  00001803  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cc8  00000000  00000000  0000211b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00002de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000660  00000000  00000000  00002fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d7e  00000000  00000000  00003614  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004392  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 c1 02 	jmp	0x582	; 0x582 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <main>
  8a:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_10>:
	return retval;
 }

  /*___Timer0 COMP Interrupt___*/
  void __vector_10 (void)
  {
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
  a4:	ef 93       	push	r30
  a6:	ff 93       	push	r31
	 uint8_t u8_count =0;
	 for( u8_count;u8_count< gu8_BufferCount ;u8_count++ )
  a8:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <gu8_BufferCount>
  ac:	33 23       	and	r19, r19
  ae:	59 f0       	breq	.+22     	; 0xc6 <__vector_10+0x34>
  b0:	e8 e6       	ldi	r30, 0x68	; 104
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	20 e0       	ldi	r18, 0x00	; 0
	 {
	    /* increase counter from every ISR */
		ga_Counter[u8_count]++;
  b6:	80 81       	ld	r24, Z
  b8:	91 81       	ldd	r25, Z+1	; 0x01
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	81 93       	st	Z+, r24
  be:	91 93       	st	Z+, r25

  /*___Timer0 COMP Interrupt___*/
  void __vector_10 (void)
  {
	 uint8_t u8_count =0;
	 for( u8_count;u8_count< gu8_BufferCount ;u8_count++ )
  c0:	2f 5f       	subi	r18, 0xFF	; 255
  c2:	23 13       	cpse	r18, r19
  c4:	f8 cf       	rjmp	.-16     	; 0xb6 <__vector_10+0x24>
	 {
	    /* increase counter from every ISR */
		ga_Counter[u8_count]++;
	 }
  c6:	ff 91       	pop	r31
  c8:	ef 91       	pop	r30
  ca:	9f 91       	pop	r25
  cc:	8f 91       	pop	r24
  ce:	3f 91       	pop	r19
  d0:	2f 91       	pop	r18
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <DIO_Init_Pin>:
uint8_t  DIO_Init_Pin  (uint8_t u8_Pin_Number ,uint8_t u8_Pin_State)
{
	uint8_t retval = ERROR_OK;
	
	/* Check Bit in PORT A */
	if(( u8_Pin_Number >= A0 ) && ( u8_Pin_Number <=A7 ))
  dc:	88 30       	cpi	r24, 0x08	; 8
  de:	08 f5       	brcc	.+66     	; 0x122 <DIO_Init_Pin+0x46>
	{
		if ( u8_Pin_State == OUT )
  e0:	61 30       	cpi	r22, 0x01	; 1
  e2:	71 f4       	brne	.+28     	; 0x100 <DIO_Init_Pin+0x24>
		{
			SET_BIT (DDRA,u8_Pin_Number);
  e4:	4a b3       	in	r20, 0x1a	; 26
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	b9 01       	movw	r22, r18
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_Init_Pin+0x16>
  ee:	66 0f       	add	r22, r22
  f0:	77 1f       	adc	r23, r23
  f2:	8a 95       	dec	r24
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_Init_Pin+0x12>
  f6:	cb 01       	movw	r24, r22
  f8:	84 2b       	or	r24, r20
  fa:	8a bb       	out	0x1a, r24	; 26
#include "DIO.h"

uint8_t  DIO_Init_Pin  (uint8_t u8_Pin_Number ,uint8_t u8_Pin_State)
{
	uint8_t retval = ERROR_OK;
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	08 95       	ret
	{
		if ( u8_Pin_State == OUT )
		{
			SET_BIT (DDRA,u8_Pin_Number);
		}
			else if ( u8_Pin_State == IN  )
 100:	61 11       	cpse	r22, r1
 102:	7d c0       	rjmp	.+250    	; 0x1fe <DIO_Init_Pin+0x122>
			{
				CLR_BIT(DDRA,u8_Pin_Number);
 104:	4a b3       	in	r20, 0x1a	; 26
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	b9 01       	movw	r22, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_Init_Pin+0x36>
 10e:	66 0f       	add	r22, r22
 110:	77 1f       	adc	r23, r23
 112:	8a 95       	dec	r24
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_Init_Pin+0x32>
 116:	cb 01       	movw	r24, r22
 118:	80 95       	com	r24
 11a:	84 23       	and	r24, r20
 11c:	8a bb       	out	0x1a, r24	; 26
#include "DIO.h"

uint8_t  DIO_Init_Pin  (uint8_t u8_Pin_Number ,uint8_t u8_Pin_State)
{
	uint8_t retval = ERROR_OK;
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	08 95       	ret
				{
					retval = ERROR_NOK;
				}
	}
	/* Check Bit in PORT B */
	else if(( u8_Pin_Number >= B0 ) && ( u8_Pin_Number <=B7 ))
 122:	98 ef       	ldi	r25, 0xF8	; 248
 124:	98 0f       	add	r25, r24
 126:	98 30       	cpi	r25, 0x08	; 8
 128:	08 f5       	brcc	.+66     	; 0x16c <DIO_Init_Pin+0x90>
	{
		u8_Pin_Number -= AVR_PORT_BITS;
	
		if ( u8_Pin_State == OUT )
 12a:	61 30       	cpi	r22, 0x01	; 1
 12c:	71 f4       	brne	.+28     	; 0x14a <DIO_Init_Pin+0x6e>
		{
			SET_BIT(DDRB,u8_Pin_Number);
 12e:	47 b3       	in	r20, 0x17	; 23
 130:	21 e0       	ldi	r18, 0x01	; 1
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	b9 01       	movw	r22, r18
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_Init_Pin+0x60>
 138:	66 0f       	add	r22, r22
 13a:	77 1f       	adc	r23, r23
 13c:	9a 95       	dec	r25
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_Init_Pin+0x5c>
 140:	cb 01       	movw	r24, r22
 142:	84 2b       	or	r24, r20
 144:	87 bb       	out	0x17, r24	; 23
#include "DIO.h"

uint8_t  DIO_Init_Pin  (uint8_t u8_Pin_Number ,uint8_t u8_Pin_State)
{
	uint8_t retval = ERROR_OK;
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	08 95       	ret
	
		if ( u8_Pin_State == OUT )
		{
			SET_BIT(DDRB,u8_Pin_Number);
		}
			else if ( u8_Pin_State == IN  )
 14a:	61 11       	cpse	r22, r1
 14c:	5a c0       	rjmp	.+180    	; 0x202 <DIO_Init_Pin+0x126>
			{
				CLR_BIT(DDRB,u8_Pin_Number);
 14e:	47 b3       	in	r20, 0x17	; 23
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	b9 01       	movw	r22, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_Init_Pin+0x80>
 158:	66 0f       	add	r22, r22
 15a:	77 1f       	adc	r23, r23
 15c:	9a 95       	dec	r25
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_Init_Pin+0x7c>
 160:	cb 01       	movw	r24, r22
 162:	80 95       	com	r24
 164:	84 23       	and	r24, r20
 166:	87 bb       	out	0x17, r24	; 23
#include "DIO.h"

uint8_t  DIO_Init_Pin  (uint8_t u8_Pin_Number ,uint8_t u8_Pin_State)
{
	uint8_t retval = ERROR_OK;
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	08 95       	ret
				{
					retval = ERROR_NOK;
				}
	}
	/* Check Bit in PORT C */
	else if(( u8_Pin_Number >= C0 ) && ( u8_Pin_Number <=C7 ))
 16c:	90 ef       	ldi	r25, 0xF0	; 240
 16e:	98 0f       	add	r25, r24
 170:	98 30       	cpi	r25, 0x08	; 8
 172:	08 f5       	brcc	.+66     	; 0x1b6 <DIO_Init_Pin+0xda>
	{
		u8_Pin_Number -= AVR_PORT_BITS;
		u8_Pin_Number -= AVR_PORT_BITS;

		if ( u8_Pin_State == OUT )
 174:	61 30       	cpi	r22, 0x01	; 1
 176:	71 f4       	brne	.+28     	; 0x194 <DIO_Init_Pin+0xb8>
		{
			SET_BIT(DDRC,u8_Pin_Number);
 178:	44 b3       	in	r20, 0x14	; 20
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	b9 01       	movw	r22, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_Init_Pin+0xaa>
 182:	66 0f       	add	r22, r22
 184:	77 1f       	adc	r23, r23
 186:	9a 95       	dec	r25
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_Init_Pin+0xa6>
 18a:	cb 01       	movw	r24, r22
 18c:	84 2b       	or	r24, r20
 18e:	84 bb       	out	0x14, r24	; 20
#include "DIO.h"

uint8_t  DIO_Init_Pin  (uint8_t u8_Pin_Number ,uint8_t u8_Pin_State)
{
	uint8_t retval = ERROR_OK;
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	08 95       	ret

		if ( u8_Pin_State == OUT )
		{
			SET_BIT(DDRC,u8_Pin_Number);
		}
			else if ( u8_Pin_State == IN  )
 194:	61 11       	cpse	r22, r1
 196:	37 c0       	rjmp	.+110    	; 0x206 <DIO_Init_Pin+0x12a>
			{
				CLR_BIT(DDRC,u8_Pin_Number);
 198:	44 b3       	in	r20, 0x14	; 20
 19a:	21 e0       	ldi	r18, 0x01	; 1
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	b9 01       	movw	r22, r18
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_Init_Pin+0xca>
 1a2:	66 0f       	add	r22, r22
 1a4:	77 1f       	adc	r23, r23
 1a6:	9a 95       	dec	r25
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_Init_Pin+0xc6>
 1aa:	cb 01       	movw	r24, r22
 1ac:	80 95       	com	r24
 1ae:	84 23       	and	r24, r20
 1b0:	84 bb       	out	0x14, r24	; 20
#include "DIO.h"

uint8_t  DIO_Init_Pin  (uint8_t u8_Pin_Number ,uint8_t u8_Pin_State)
{
	uint8_t retval = ERROR_OK;
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	08 95       	ret
				{
					retval = ERROR_NOK;
				}
	}
	/* Check Bit in PORT D */
	else if(( u8_Pin_Number >= D0 ) && ( u8_Pin_Number <=D7 ))
 1b6:	88 51       	subi	r24, 0x18	; 24
 1b8:	88 30       	cpi	r24, 0x08	; 8
 1ba:	38 f5       	brcc	.+78     	; 0x20a <DIO_Init_Pin+0x12e>
	{
		u8_Pin_Number -= AVR_PORT_BITS;
		u8_Pin_Number -= AVR_PORT_BITS;
		u8_Pin_Number -= AVR_PORT_BITS;

		if ( u8_Pin_State == OUT )
 1bc:	61 30       	cpi	r22, 0x01	; 1
 1be:	71 f4       	brne	.+28     	; 0x1dc <DIO_Init_Pin+0x100>
		{
			SET_BIT(DDRD,u8_Pin_Number);
 1c0:	41 b3       	in	r20, 0x11	; 17
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	b9 01       	movw	r22, r18
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_Init_Pin+0xf2>
 1ca:	66 0f       	add	r22, r22
 1cc:	77 1f       	adc	r23, r23
 1ce:	8a 95       	dec	r24
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_Init_Pin+0xee>
 1d2:	cb 01       	movw	r24, r22
 1d4:	84 2b       	or	r24, r20
 1d6:	81 bb       	out	0x11, r24	; 17
#include "DIO.h"

uint8_t  DIO_Init_Pin  (uint8_t u8_Pin_Number ,uint8_t u8_Pin_State)
{
	uint8_t retval = ERROR_OK;
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	08 95       	ret

		if ( u8_Pin_State == OUT )
		{
			SET_BIT(DDRD,u8_Pin_Number);
		}
			else if ( u8_Pin_State == IN  )
 1dc:	61 11       	cpse	r22, r1
 1de:	17 c0       	rjmp	.+46     	; 0x20e <DIO_Init_Pin+0x132>
			{
				CLR_BIT(DDRD,u8_Pin_Number);
 1e0:	41 b3       	in	r20, 0x11	; 17
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	b9 01       	movw	r22, r18
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_Init_Pin+0x112>
 1ea:	66 0f       	add	r22, r22
 1ec:	77 1f       	adc	r23, r23
 1ee:	8a 95       	dec	r24
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_Init_Pin+0x10e>
 1f2:	cb 01       	movw	r24, r22
 1f4:	80 95       	com	r24
 1f6:	84 23       	and	r24, r20
 1f8:	81 bb       	out	0x11, r24	; 17
#include "DIO.h"

uint8_t  DIO_Init_Pin  (uint8_t u8_Pin_Number ,uint8_t u8_Pin_State)
{
	uint8_t retval = ERROR_OK;
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	08 95       	ret
			{
				CLR_BIT(DDRA,u8_Pin_Number);
			}
				else
				{
					retval = ERROR_NOK;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	08 95       	ret
			{
				CLR_BIT(DDRB,u8_Pin_Number);
			}
				else
				{
					retval = ERROR_NOK;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	08 95       	ret
			{
				CLR_BIT(DDRC,u8_Pin_Number);
			}
				else
				{
					retval = ERROR_NOK;
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	08 95       	ret
				}
	}
	/* ERROR Bit Number is wrong */
	else
	{
		retval = ERROR_NOK;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	08 95       	ret
			{
				CLR_BIT(DDRD,u8_Pin_Number);
			}
				else
				{
					retval = ERROR_NOK;
 20e:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		retval = ERROR_NOK;
	}
	return retval;	
}
 210:	08 95       	ret

00000212 <DIO_Init_Port>:
uint8_t  DIO_Init_Port (uint8_t u8_Port_Number,uint8_t u8_Port_State)
{
	uint8_t retval = ERROR_OK;
	
	/* Check for PORT A */
	if( u8_Port_Number == PORT_A )
 212:	81 11       	cpse	r24, r1
 214:	0b c0       	rjmp	.+22     	; 0x22c <DIO_Init_Port+0x1a>
	{
		if( u8_Port_State == OUTPUTS )
 216:	6f 3f       	cpi	r22, 0xFF	; 255
 218:	21 f4       	brne	.+8      	; 0x222 <DIO_Init_Port+0x10>
		{
			DDRA = OUTPUTS;
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	8a bb       	out	0x1a, r24	; 26
}


uint8_t  DIO_Init_Port (uint8_t u8_Port_Number,uint8_t u8_Port_State)
{
	uint8_t retval = ERROR_OK;
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	08 95       	ret
	{
		if( u8_Port_State == OUTPUTS )
		{
			DDRA = OUTPUTS;
		}
			else if( u8_Port_State == INPUTS )
 222:	61 11       	cpse	r22, r1
 224:	2a c0       	rjmp	.+84     	; 0x27a <DIO_Init_Port+0x68>
			{
				DDRA = INPUTS;
 226:	1a ba       	out	0x1a, r1	; 26
}


uint8_t  DIO_Init_Port (uint8_t u8_Port_Number,uint8_t u8_Port_State)
{
	uint8_t retval = ERROR_OK;
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	08 95       	ret
				{
					retval = ERROR_NOK;
				}
	}
	/* Check for PORT B */
	else if( u8_Port_Number == PORT_B )
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	59 f4       	brne	.+22     	; 0x246 <DIO_Init_Port+0x34>
	{
		if( u8_Port_State == OUTPUTS )
 230:	6f 3f       	cpi	r22, 0xFF	; 255
 232:	21 f4       	brne	.+8      	; 0x23c <DIO_Init_Port+0x2a>
		{
			DDRB = OUTPUTS;
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	87 bb       	out	0x17, r24	; 23
}


uint8_t  DIO_Init_Port (uint8_t u8_Port_Number,uint8_t u8_Port_State)
{
	uint8_t retval = ERROR_OK;
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	08 95       	ret
	{
		if( u8_Port_State == OUTPUTS )
		{
			DDRB = OUTPUTS;
		}
			else if( u8_Port_State == INPUTS )
 23c:	61 11       	cpse	r22, r1
 23e:	1f c0       	rjmp	.+62     	; 0x27e <DIO_Init_Port+0x6c>
			{
				DDRB = INPUTS;
 240:	17 ba       	out	0x17, r1	; 23
}


uint8_t  DIO_Init_Port (uint8_t u8_Port_Number,uint8_t u8_Port_State)
{
	uint8_t retval = ERROR_OK;
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	08 95       	ret
				{
					retval = ERROR_NOK;
				}
	}
	/* Check for PORT C */
	else if( u8_Port_Number == PORT_C )
 246:	82 30       	cpi	r24, 0x02	; 2
 248:	59 f4       	brne	.+22     	; 0x260 <DIO_Init_Port+0x4e>
	{
		if( u8_Port_State == OUTPUTS )
 24a:	6f 3f       	cpi	r22, 0xFF	; 255
 24c:	21 f4       	brne	.+8      	; 0x256 <DIO_Init_Port+0x44>
		{
			DDRC = OUTPUTS;
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	84 bb       	out	0x14, r24	; 20
}


uint8_t  DIO_Init_Port (uint8_t u8_Port_Number,uint8_t u8_Port_State)
{
	uint8_t retval = ERROR_OK;
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	08 95       	ret
	{
		if( u8_Port_State == OUTPUTS )
		{
			DDRC = OUTPUTS;
		}
			else if( u8_Port_State == INPUTS )
 256:	61 11       	cpse	r22, r1
 258:	14 c0       	rjmp	.+40     	; 0x282 <DIO_Init_Port+0x70>
			{
				DDRC = INPUTS;
 25a:	14 ba       	out	0x14, r1	; 20
}


uint8_t  DIO_Init_Port (uint8_t u8_Port_Number,uint8_t u8_Port_State)
{
	uint8_t retval = ERROR_OK;
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	08 95       	ret
				{
				retval = ERROR_NOK;
				}
	}
	/* Check for PORT D */
	else if( u8_Port_Number == PORT_D )
 260:	83 30       	cpi	r24, 0x03	; 3
 262:	89 f4       	brne	.+34     	; 0x286 <DIO_Init_Port+0x74>
	{
		if( u8_Port_State == OUTPUTS )
 264:	6f 3f       	cpi	r22, 0xFF	; 255
 266:	21 f4       	brne	.+8      	; 0x270 <DIO_Init_Port+0x5e>
		{
			DDRD = OUTPUTS;
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	81 bb       	out	0x11, r24	; 17
}


uint8_t  DIO_Init_Port (uint8_t u8_Port_Number,uint8_t u8_Port_State)
{
	uint8_t retval = ERROR_OK;
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	08 95       	ret
	{
		if( u8_Port_State == OUTPUTS )
		{
			DDRD = OUTPUTS;
		}
			else if( u8_Port_State == INPUTS )
 270:	61 11       	cpse	r22, r1
 272:	0b c0       	rjmp	.+22     	; 0x28a <DIO_Init_Port+0x78>
			{
				DDRD = INPUTS;
 274:	11 ba       	out	0x11, r1	; 17
}


uint8_t  DIO_Init_Port (uint8_t u8_Port_Number,uint8_t u8_Port_State)
{
	uint8_t retval = ERROR_OK;
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	08 95       	ret
			{
				DDRA = INPUTS;
			}
				else 
				{
					retval = ERROR_NOK;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	08 95       	ret
			{
				DDRB = INPUTS;
			}
				else 
				{
					retval = ERROR_NOK;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	08 95       	ret
			{
				DDRC = INPUTS;
			}
				else 
				{
				retval = ERROR_NOK;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	08 95       	ret
				}
	}
	/* Error PORT input */
	else
	{
		retval = ERROR_NOK;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	08 95       	ret
			{
				DDRD = INPUTS;
			}
				else 
				{
					retval = ERROR_NOK;
 28a:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		retval = ERROR_NOK;
	}
	return retval;
}
 28c:	08 95       	ret

0000028e <DIO_Write_Pin>:

uint8_t  DIO_Write_Pin (uint8_t u8_Pin_Number,uint8_t Pin_Value)
{
	uint8_t retval = ERROR_OK;
	/* Check Bit in PORT A */
	if(( u8_Pin_Number >= A0 ) && ( u8_Pin_Number <=A7 ))
 28e:	88 30       	cpi	r24, 0x08	; 8
 290:	08 f5       	brcc	.+66     	; 0x2d4 <DIO_Write_Pin+0x46>
	{
		if ( Pin_Value == HIGH )
 292:	61 30       	cpi	r22, 0x01	; 1
 294:	71 f4       	brne	.+28     	; 0x2b2 <DIO_Write_Pin+0x24>
		{
			SET_BIT (PORTA,u8_Pin_Number);
 296:	4b b3       	in	r20, 0x1b	; 27
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	b9 01       	movw	r22, r18
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_Write_Pin+0x16>
 2a0:	66 0f       	add	r22, r22
 2a2:	77 1f       	adc	r23, r23
 2a4:	8a 95       	dec	r24
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_Write_Pin+0x12>
 2a8:	cb 01       	movw	r24, r22
 2aa:	84 2b       	or	r24, r20
 2ac:	8b bb       	out	0x1b, r24	; 27
}


uint8_t  DIO_Write_Pin (uint8_t u8_Pin_Number,uint8_t Pin_Value)
{
	uint8_t retval = ERROR_OK;
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	08 95       	ret
	{
		if ( Pin_Value == HIGH )
		{
			SET_BIT (PORTA,u8_Pin_Number);
		}
			else if ( Pin_Value == LOW  )
 2b2:	61 11       	cpse	r22, r1
 2b4:	7d c0       	rjmp	.+250    	; 0x3b0 <DIO_Write_Pin+0x122>
			{
				CLR_BIT(PORTA,u8_Pin_Number);
 2b6:	4b b3       	in	r20, 0x1b	; 27
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	b9 01       	movw	r22, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_Write_Pin+0x36>
 2c0:	66 0f       	add	r22, r22
 2c2:	77 1f       	adc	r23, r23
 2c4:	8a 95       	dec	r24
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_Write_Pin+0x32>
 2c8:	cb 01       	movw	r24, r22
 2ca:	80 95       	com	r24
 2cc:	84 23       	and	r24, r20
 2ce:	8b bb       	out	0x1b, r24	; 27
}


uint8_t  DIO_Write_Pin (uint8_t u8_Pin_Number,uint8_t Pin_Value)
{
	uint8_t retval = ERROR_OK;
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	08 95       	ret
				{
					retval = ERROR_NOK;
				}
	}
	/* Check Bit in PORT B */
	else if(( u8_Pin_Number >= B0 ) && ( u8_Pin_Number <=B7 ))
 2d4:	98 ef       	ldi	r25, 0xF8	; 248
 2d6:	98 0f       	add	r25, r24
 2d8:	98 30       	cpi	r25, 0x08	; 8
 2da:	08 f5       	brcc	.+66     	; 0x31e <DIO_Write_Pin+0x90>
	{
		u8_Pin_Number -= AVR_PORT_BITS;
		if ( Pin_Value == HIGH )
 2dc:	61 30       	cpi	r22, 0x01	; 1
 2de:	71 f4       	brne	.+28     	; 0x2fc <DIO_Write_Pin+0x6e>
		{
			SET_BIT(PORTB,u8_Pin_Number);
 2e0:	48 b3       	in	r20, 0x18	; 24
 2e2:	21 e0       	ldi	r18, 0x01	; 1
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	b9 01       	movw	r22, r18
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_Write_Pin+0x60>
 2ea:	66 0f       	add	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	9a 95       	dec	r25
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_Write_Pin+0x5c>
 2f2:	cb 01       	movw	r24, r22
 2f4:	84 2b       	or	r24, r20
 2f6:	88 bb       	out	0x18, r24	; 24
}


uint8_t  DIO_Write_Pin (uint8_t u8_Pin_Number,uint8_t Pin_Value)
{
	uint8_t retval = ERROR_OK;
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	08 95       	ret
		u8_Pin_Number -= AVR_PORT_BITS;
		if ( Pin_Value == HIGH )
		{
			SET_BIT(PORTB,u8_Pin_Number);
		}
			else if ( Pin_Value == LOW  )
 2fc:	61 11       	cpse	r22, r1
 2fe:	5a c0       	rjmp	.+180    	; 0x3b4 <DIO_Write_Pin+0x126>
			{
				CLR_BIT(PORTB,u8_Pin_Number);
 300:	48 b3       	in	r20, 0x18	; 24
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	b9 01       	movw	r22, r18
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_Write_Pin+0x80>
 30a:	66 0f       	add	r22, r22
 30c:	77 1f       	adc	r23, r23
 30e:	9a 95       	dec	r25
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_Write_Pin+0x7c>
 312:	cb 01       	movw	r24, r22
 314:	80 95       	com	r24
 316:	84 23       	and	r24, r20
 318:	88 bb       	out	0x18, r24	; 24
}


uint8_t  DIO_Write_Pin (uint8_t u8_Pin_Number,uint8_t Pin_Value)
{
	uint8_t retval = ERROR_OK;
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	08 95       	ret
				{
					retval = ERROR_NOK;
				}
	}
	/* Check Bit in PORT C */
	else if(( u8_Pin_Number >= C0 ) && ( u8_Pin_Number <=C7 ))
 31e:	90 ef       	ldi	r25, 0xF0	; 240
 320:	98 0f       	add	r25, r24
 322:	98 30       	cpi	r25, 0x08	; 8
 324:	08 f5       	brcc	.+66     	; 0x368 <DIO_Write_Pin+0xda>
	{
		u8_Pin_Number -= AVR_PORT_BITS;
		u8_Pin_Number -= AVR_PORT_BITS;
		if ( Pin_Value == HIGH )
 326:	61 30       	cpi	r22, 0x01	; 1
 328:	71 f4       	brne	.+28     	; 0x346 <DIO_Write_Pin+0xb8>
		{
			SET_BIT(PORTC,u8_Pin_Number);
 32a:	45 b3       	in	r20, 0x15	; 21
 32c:	21 e0       	ldi	r18, 0x01	; 1
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	b9 01       	movw	r22, r18
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_Write_Pin+0xaa>
 334:	66 0f       	add	r22, r22
 336:	77 1f       	adc	r23, r23
 338:	9a 95       	dec	r25
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_Write_Pin+0xa6>
 33c:	cb 01       	movw	r24, r22
 33e:	84 2b       	or	r24, r20
 340:	85 bb       	out	0x15, r24	; 21
}


uint8_t  DIO_Write_Pin (uint8_t u8_Pin_Number,uint8_t Pin_Value)
{
	uint8_t retval = ERROR_OK;
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	08 95       	ret
		u8_Pin_Number -= AVR_PORT_BITS;
		if ( Pin_Value == HIGH )
		{
			SET_BIT(PORTC,u8_Pin_Number);
		}
			else if ( Pin_Value == LOW  )
 346:	61 11       	cpse	r22, r1
 348:	37 c0       	rjmp	.+110    	; 0x3b8 <DIO_Write_Pin+0x12a>
			{
				CLR_BIT(PORTC,u8_Pin_Number);
 34a:	45 b3       	in	r20, 0x15	; 21
 34c:	21 e0       	ldi	r18, 0x01	; 1
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	b9 01       	movw	r22, r18
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_Write_Pin+0xca>
 354:	66 0f       	add	r22, r22
 356:	77 1f       	adc	r23, r23
 358:	9a 95       	dec	r25
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_Write_Pin+0xc6>
 35c:	cb 01       	movw	r24, r22
 35e:	80 95       	com	r24
 360:	84 23       	and	r24, r20
 362:	85 bb       	out	0x15, r24	; 21
}


uint8_t  DIO_Write_Pin (uint8_t u8_Pin_Number,uint8_t Pin_Value)
{
	uint8_t retval = ERROR_OK;
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	08 95       	ret
				{
					retval = ERROR_NOK;
				}
	}
	/* Check Bit in PORT D */
	else if(( u8_Pin_Number >= D0 ) && ( u8_Pin_Number <=D7 ))
 368:	88 51       	subi	r24, 0x18	; 24
 36a:	88 30       	cpi	r24, 0x08	; 8
 36c:	38 f5       	brcc	.+78     	; 0x3bc <DIO_Write_Pin+0x12e>
	{
		u8_Pin_Number -= AVR_PORT_BITS;
		u8_Pin_Number -= AVR_PORT_BITS;
		u8_Pin_Number -= AVR_PORT_BITS;
		if ( Pin_Value == HIGH )
 36e:	61 30       	cpi	r22, 0x01	; 1
 370:	71 f4       	brne	.+28     	; 0x38e <DIO_Write_Pin+0x100>
		{
			SET_BIT(PORTD,u8_Pin_Number);
 372:	42 b3       	in	r20, 0x12	; 18
 374:	21 e0       	ldi	r18, 0x01	; 1
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	b9 01       	movw	r22, r18
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_Write_Pin+0xf2>
 37c:	66 0f       	add	r22, r22
 37e:	77 1f       	adc	r23, r23
 380:	8a 95       	dec	r24
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_Write_Pin+0xee>
 384:	cb 01       	movw	r24, r22
 386:	84 2b       	or	r24, r20
 388:	82 bb       	out	0x12, r24	; 18
}


uint8_t  DIO_Write_Pin (uint8_t u8_Pin_Number,uint8_t Pin_Value)
{
	uint8_t retval = ERROR_OK;
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	08 95       	ret
		u8_Pin_Number -= AVR_PORT_BITS;
		if ( Pin_Value == HIGH )
		{
			SET_BIT(PORTD,u8_Pin_Number);
		}
			else if ( Pin_Value == LOW  )
 38e:	61 11       	cpse	r22, r1
 390:	17 c0       	rjmp	.+46     	; 0x3c0 <DIO_Write_Pin+0x132>
			{
				CLR_BIT(PORTD,u8_Pin_Number);
 392:	42 b3       	in	r20, 0x12	; 18
 394:	21 e0       	ldi	r18, 0x01	; 1
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	b9 01       	movw	r22, r18
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_Write_Pin+0x112>
 39c:	66 0f       	add	r22, r22
 39e:	77 1f       	adc	r23, r23
 3a0:	8a 95       	dec	r24
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_Write_Pin+0x10e>
 3a4:	cb 01       	movw	r24, r22
 3a6:	80 95       	com	r24
 3a8:	84 23       	and	r24, r20
 3aa:	82 bb       	out	0x12, r24	; 18
}


uint8_t  DIO_Write_Pin (uint8_t u8_Pin_Number,uint8_t Pin_Value)
{
	uint8_t retval = ERROR_OK;
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	08 95       	ret
			{
				CLR_BIT(PORTA,u8_Pin_Number);
			}
				else
				{
					retval = ERROR_NOK;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	08 95       	ret
			{
				CLR_BIT(PORTB,u8_Pin_Number);
			}
				else
				{
					retval = ERROR_NOK;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	08 95       	ret
			{
				CLR_BIT(PORTC,u8_Pin_Number);
			}
				else
				{
					retval = ERROR_NOK;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	08 95       	ret
				}
	}
	/* ERROR Bit Number is wrong */
	else
	{
		retval = ERROR_NOK;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	08 95       	ret
			{
				CLR_BIT(PORTD,u8_Pin_Number);
			}
				else
				{
					retval = ERROR_NOK;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
	{
		retval = ERROR_NOK;
	}
	return retval;

}
 3c2:	08 95       	ret

000003c4 <SPI_Init>:
	{
		retval = ERROR_INTERRUPT_POLLING;		/* Wrong SPI Not Interrupt or Polling  */
	}

	return retval;
}
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	ec 01       	movw	r28, r24
 3ca:	88 81       	ld	r24, Y
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <SPI_Init+0xe>
 3d0:	78 c0       	rjmp	.+240    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 3d2:	6c 9a       	sbi	0x0d, 4	; 13
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	8c e0       	ldi	r24, 0x0C	; 12
 3d8:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_Init_Pin>
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	8d e0       	ldi	r24, 0x0D	; 13
 3e0:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_Init_Pin>
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	8e e0       	ldi	r24, 0x0E	; 14
 3e8:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_Init_Pin>
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	8f e0       	ldi	r24, 0x0F	; 15
 3f0:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_Init_Pin>
 3f4:	89 81       	ldd	r24, Y+1	; 0x01
 3f6:	81 11       	cpse	r24, r1
 3f8:	1a c0       	rjmp	.+52     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3fa:	70 98       	cbi	0x0e, 0	; 14
 3fc:	8a 81       	ldd	r24, Y+2	; 0x02
 3fe:	81 30       	cpi	r24, 0x01	; 1
 400:	51 f0       	breq	.+20     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 402:	28 f0       	brcs	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 404:	82 30       	cpi	r24, 0x02	; 2
 406:	59 f0       	breq	.+22     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 408:	83 30       	cpi	r24, 0x03	; 3
 40a:	69 f0       	breq	.+26     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 40c:	26 c0       	rjmp	.+76     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 40e:	68 98       	cbi	0x0d, 0	; 13
 410:	69 98       	cbi	0x0d, 1	; 13
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	27 c0       	rjmp	.+78     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 416:	68 9a       	sbi	0x0d, 0	; 13
 418:	69 98       	cbi	0x0d, 1	; 13
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	23 c0       	rjmp	.+70     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 41e:	68 98       	cbi	0x0d, 0	; 13
 420:	69 9a       	sbi	0x0d, 1	; 13
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	1f c0       	rjmp	.+62     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 426:	68 9a       	sbi	0x0d, 0	; 13
 428:	69 9a       	sbi	0x0d, 1	; 13
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	1b c0       	rjmp	.+54     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 42e:	81 30       	cpi	r24, 0x01	; 1
 430:	b1 f4       	brne	.+44     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 432:	70 9a       	sbi	0x0e, 0	; 14
 434:	8a 81       	ldd	r24, Y+2	; 0x02
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	41 f0       	breq	.+16     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 43a:	18 f0       	brcs	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43c:	82 30       	cpi	r24, 0x02	; 2
 43e:	49 f0       	breq	.+18     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 440:	10 c0       	rjmp	.+32     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 442:	68 98       	cbi	0x0d, 0	; 13
 444:	69 98       	cbi	0x0d, 1	; 13
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	0d c0       	rjmp	.+26     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 44a:	68 9a       	sbi	0x0d, 0	; 13
 44c:	69 98       	cbi	0x0d, 1	; 13
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	09 c0       	rjmp	.+18     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 452:	68 98       	cbi	0x0d, 0	; 13
 454:	69 9a       	sbi	0x0d, 1	; 13
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	05 c0       	rjmp	.+10     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 45a:	8e ef       	ldi	r24, 0xFE	; 254
 45c:	03 c0       	rjmp	.+6      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 45e:	8f ef       	ldi	r24, 0xFF	; 255
 460:	01 c0       	rjmp	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 462:	8e ef       	ldi	r24, 0xFE	; 254
 464:	9b 81       	ldd	r25, Y+3	; 0x03
 466:	91 30       	cpi	r25, 0x01	; 1
 468:	41 f4       	brne	.+16     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 46a:	6f 9a       	sbi	0x0d, 7	; 13
 46c:	9f b7       	in	r25, 0x3f	; 63
 46e:	90 68       	ori	r25, 0x80	; 128
 470:	9f bf       	out	0x3f, r25	; 63
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <gu8_Interrupt_Polling_Mode>
 478:	06 c0       	rjmp	.+12     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 47a:	91 11       	cpse	r25, r1
 47c:	03 c0       	rjmp	.+6      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 47e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <gu8_Interrupt_Polling_Mode>
 482:	01 c0       	rjmp	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 484:	8c ef       	ldi	r24, 0xFC	; 252
 486:	9d 81       	ldd	r25, Y+5	; 0x05
 488:	91 11       	cpse	r25, r1
 48a:	02 c0       	rjmp	.+4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 48c:	6d 98       	cbi	0x0d, 5	; 13
 48e:	05 c0       	rjmp	.+10     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 490:	91 30       	cpi	r25, 0x01	; 1
 492:	11 f4       	brne	.+4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 494:	6d 9a       	sbi	0x0d, 5	; 13
 496:	01 c0       	rjmp	.+2      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 498:	8b ef       	ldi	r24, 0xFB	; 251
 49a:	9e 81       	ldd	r25, Y+6	; 0x06
 49c:	91 11       	cpse	r25, r1
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a0:	6b 98       	cbi	0x0d, 3	; 13
 4a2:	05 c0       	rjmp	.+10     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4a4:	91 30       	cpi	r25, 0x01	; 1
 4a6:	11 f4       	brne	.+4      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4a8:	6b 9a       	sbi	0x0d, 3	; 13
 4aa:	01 c0       	rjmp	.+2      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4ac:	8a ef       	ldi	r24, 0xFA	; 250
 4ae:	9c 81       	ldd	r25, Y+4	; 0x04
 4b0:	91 11       	cpse	r25, r1
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b4:	6a 98       	cbi	0x0d, 2	; 13
 4b6:	4c c0       	rjmp	.+152    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 4b8:	91 30       	cpi	r25, 0x01	; 1
 4ba:	09 f0       	breq	.+2      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4bc:	44 c0       	rjmp	.+136    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 4be:	6a 9a       	sbi	0x0d, 2	; 13
 4c0:	47 c0       	rjmp	.+142    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 4c2:	81 11       	cpse	r24, r1
 4c4:	42 c0       	rjmp	.+132    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 4c6:	6c 98       	cbi	0x0d, 4	; 13
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	8c e0       	ldi	r24, 0x0C	; 12
 4cc:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_Init_Pin>
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	8d e0       	ldi	r24, 0x0D	; 13
 4d4:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_Init_Pin>
 4d8:	61 e0       	ldi	r22, 0x01	; 1
 4da:	8e e0       	ldi	r24, 0x0E	; 14
 4dc:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_Init_Pin>
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	8f e0       	ldi	r24, 0x0F	; 15
 4e4:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_Init_Pin>
 4e8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ea:	81 30       	cpi	r24, 0x01	; 1
 4ec:	49 f4       	brne	.+18     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4ee:	6f 9a       	sbi	0x0d, 7	; 13
 4f0:	8f b7       	in	r24, 0x3f	; 63
 4f2:	80 68       	ori	r24, 0x80	; 128
 4f4:	8f bf       	out	0x3f, r24	; 63
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <gu8_Interrupt_Polling_Mode>
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	06 c0       	rjmp	.+12     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 500:	81 11       	cpse	r24, r1
 502:	03 c0       	rjmp	.+6      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 504:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <gu8_Interrupt_Polling_Mode>
 508:	01 c0       	rjmp	.+2      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 50a:	8c ef       	ldi	r24, 0xFC	; 252
 50c:	9d 81       	ldd	r25, Y+5	; 0x05
 50e:	91 11       	cpse	r25, r1
 510:	02 c0       	rjmp	.+4      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 512:	6d 98       	cbi	0x0d, 5	; 13
 514:	05 c0       	rjmp	.+10     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 516:	91 30       	cpi	r25, 0x01	; 1
 518:	11 f4       	brne	.+4      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 51a:	6d 9a       	sbi	0x0d, 5	; 13
 51c:	01 c0       	rjmp	.+2      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 51e:	8b ef       	ldi	r24, 0xFB	; 251
 520:	9e 81       	ldd	r25, Y+6	; 0x06
 522:	91 11       	cpse	r25, r1
 524:	02 c0       	rjmp	.+4      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 526:	6b 98       	cbi	0x0d, 3	; 13
 528:	05 c0       	rjmp	.+10     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 52a:	91 30       	cpi	r25, 0x01	; 1
 52c:	11 f4       	brne	.+4      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 52e:	6b 9a       	sbi	0x0d, 3	; 13
 530:	01 c0       	rjmp	.+2      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 532:	8a ef       	ldi	r24, 0xFA	; 250
 534:	9c 81       	ldd	r25, Y+4	; 0x04
 536:	91 11       	cpse	r25, r1
 538:	02 c0       	rjmp	.+4      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 53a:	6a 98       	cbi	0x0d, 2	; 13
 53c:	09 c0       	rjmp	.+18     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 53e:	91 30       	cpi	r25, 0x01	; 1
 540:	31 f4       	brne	.+12     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 542:	6a 9a       	sbi	0x0d, 2	; 13
 544:	05 c0       	rjmp	.+10     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 546:	89 ef       	ldi	r24, 0xF9	; 249
 548:	03 c0       	rjmp	.+6      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 54a:	8d ef       	ldi	r24, 0xFD	; 253
 54c:	01 c0       	rjmp	.+2      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 54e:	89 ef       	ldi	r24, 0xF9	; 249
 550:	6e 9a       	sbi	0x0d, 6	; 13
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	08 95       	ret

00000558 <SPI_Receive_Byte>:

/* Description : SPI Receive Byte                                                */
/* Input       : u8_Data "pointer to u8 Data"                                    */
/* Output      : Error Checking                                                  */
uint8_t SPI_Receive_Byte(uint8_t *pu8_Data)
{
 558:	fc 01       	movw	r30, r24
	uint8_t retval = ERROR_OK;
	/* Check if Polling or Interrupt */
	if ( gu8_Interrupt_Polling_Mode == INTERRUPT )
 55a:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <gu8_Interrupt_Polling_Mode>
 55e:	91 30       	cpi	r25, 0x01	; 1
 560:	31 f4       	brne	.+12     	; 0x56e <SPI_Receive_Byte+0x16>
	{
		gu8_Data_SentFlag=0;			/* Clear Global Flag of ISR */
 562:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
		*pu8_Data = SPDR;				/* Read DATA from SPI */
 566:	8f b1       	in	r24, 0x0f	; 15
 568:	80 83       	st	Z, r24
/* Description : SPI Receive Byte                                                */
/* Input       : u8_Data "pointer to u8 Data"                                    */
/* Output      : Error Checking                                                  */
uint8_t SPI_Receive_Byte(uint8_t *pu8_Data)
{
	uint8_t retval = ERROR_OK;
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	08 95       	ret
	if ( gu8_Interrupt_Polling_Mode == INTERRUPT )
	{
		gu8_Data_SentFlag=0;			/* Clear Global Flag of ISR */
		*pu8_Data = SPDR;				/* Read DATA from SPI */
	}
	else if ( gu8_Interrupt_Polling_Mode == POLLING )
 56e:	91 11       	cpse	r25, r1
 570:	06 c0       	rjmp	.+12     	; 0x57e <SPI_Receive_Byte+0x26>
	{
		while( ! READ_BIT(SPSR,SPIF) );	/* Loop until getting Flag */
 572:	77 9b       	sbis	0x0e, 7	; 14
 574:	fe cf       	rjmp	.-4      	; 0x572 <SPI_Receive_Byte+0x1a>
		*pu8_Data = SPDR;				/* Read DATA from SPI */
 576:	8f b1       	in	r24, 0x0f	; 15
 578:	80 83       	st	Z, r24
/* Description : SPI Receive Byte                                                */
/* Input       : u8_Data "pointer to u8 Data"                                    */
/* Output      : Error Checking                                                  */
uint8_t SPI_Receive_Byte(uint8_t *pu8_Data)
{
	uint8_t retval = ERROR_OK;
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	08 95       	ret
		while( ! READ_BIT(SPSR,SPIF) );	/* Loop until getting Flag */
		*pu8_Data = SPDR;				/* Read DATA from SPI */
	}
	else 
	{
		retval = ERROR_INTERRUPT_POLLING;		/* Wrong SPI Not Interrupt or Polling  */
 57e:	8c ef       	ldi	r24, 0xFC	; 252
	}
	return retval;
}
 580:	08 95       	ret

00000582 <__vector_12>:

/* ISR of SPI */
void __vector_12(void)
{
 582:	1f 92       	push	r1
 584:	0f 92       	push	r0
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	0f 92       	push	r0
 58a:	11 24       	eor	r1, r1
 58c:	8f 93       	push	r24
	gu8_Data_SentFlag = 1;    /* Set the Global variable to ensure of ISR data sent successfully. */
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 594:	8f 91       	pop	r24
 596:	0f 90       	pop	r0
 598:	0f be       	out	0x3f, r0	; 63
 59a:	0f 90       	pop	r0
 59c:	1f 90       	pop	r1
 59e:	18 95       	reti

000005a0 <main>:
#include "DIO.h"



int main(void)
{
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	1f 92       	push	r1
 5a6:	cd b7       	in	r28, 0x3d	; 61
 5a8:	de b7       	in	r29, 0x3e	; 62
	uint8_t OPA =0;
 5aa:	19 82       	std	Y+1, r1	; 0x01

	DIO_Init_Port(PORT_B,OUTPUTS);	/* Set Out Port for 7 segment */
 5ac:	6f ef       	ldi	r22, 0xFF	; 255
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Init_Port>
	DIO_Init_Pin(D2,OUT);			/* Set Out for 7 Segment pin enable */
 5b4:	61 e0       	ldi	r22, 0x01	; 1
 5b6:	8a e1       	ldi	r24, 0x1A	; 26
 5b8:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_Init_Pin>
	DIO_Init_Pin(D3,OUT);			/* Set Out for 7 Segment pin enable */
 5bc:	61 e0       	ldi	r22, 0x01	; 1
 5be:	8b e1       	ldi	r24, 0x1B	; 27
 5c0:	0e 94 6e 00 	call	0xdc	; 0xdc <DIO_Init_Pin>
	DIO_Write_Pin(D2,HIGH);			/* For 7 Segment Enable */
 5c4:	61 e0       	ldi	r22, 0x01	; 1
 5c6:	8a e1       	ldi	r24, 0x1A	; 26
 5c8:	0e 94 47 01 	call	0x28e	; 0x28e <DIO_Write_Pin>
	DIO_Write_Pin(D3,HIGH);			/* For 7 Segment Enable */
 5cc:	61 e0       	ldi	r22, 0x01	; 1
 5ce:	8b e1       	ldi	r24, 0x1B	; 27
 5d0:	0e 94 47 01 	call	0x28e	; 0x28e <DIO_Write_Pin>
	SPI_Init(&SPI_RX);
 5d4:	81 e6       	ldi	r24, 0x61	; 97
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <SPI_Init>

    while (1) 
    {
		SPI_Receive_Byte(&OPA);
 5dc:	ce 01       	movw	r24, r28
 5de:	01 96       	adiw	r24, 0x01	; 1
 5e0:	0e 94 ac 02 	call	0x558	; 0x558 <SPI_Receive_Byte>
		PORTB = OPA ;
 5e4:	89 81       	ldd	r24, Y+1	; 0x01
 5e6:	88 bb       	out	0x18, r24	; 24
 5e8:	f9 cf       	rjmp	.-14     	; 0x5dc <main+0x3c>

000005ea <_exit>:
 5ea:	f8 94       	cli

000005ec <__stop_program>:
 5ec:	ff cf       	rjmp	.-2      	; 0x5ec <__stop_program>
